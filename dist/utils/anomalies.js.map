{"version":3,"sources":["utils/anomalies.js"],"names":[],"mappings":"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","file":"utils/anomalies.js","sourcesContent":["'use strict';\r\n// Load system modules\r\n\r\n// Load modules\r\nimport _ from 'lodash';\r\n\r\n// Load my modules\r\n\r\n// Constant declaration\r\nconst GREY_THRESHOLD = 6;\r\nconst NILS_TO_USE = [\r\n  1,\r\n  2,\r\n  4,\r\n  6,\r\n  7,\r\n  9,\r\n  10,\r\n  11,\r\n  20,\r\n  21,\r\n  22,\r\n  35,\r\n  44,\r\n  51,\r\n  52,\r\n  60,\r\n  69,\r\n  71,\r\n];\r\n\r\n// Module variables declaration\r\n\r\n// Module functions declaration\r\nfunction q( i, data ) {\r\n  let Fi = i/4; // QUARTILE so we use: 4\r\n  let n = data.length;\r\n  let int = Math.floor;\r\n\r\n  let prod = n*Fi;\r\n  let val;\r\n  if( int( prod )===prod ) {\r\n    val = (data[ prod-1 ] + data[ prod ])/2;\r\n  } else {\r\n    val = data[ int( prod ) ];\r\n  }\r\n\r\n  return val;\r\n}\r\nfunction quartiles( percentages ) {\r\n  let quartile1 = q( 1, percentages );\r\n  let quartile2 = q( 2, percentages );\r\n  let quartile3 = q( 3, percentages );\r\n  let quartile4 = q( 4, percentages );\r\n\r\n  return {\r\n    quartile1,\r\n    quartile2,\r\n    quartile3,\r\n    quartile4,\r\n  };\r\n}\r\nfunction thresholds( percentages ) {\r\n  let {\r\n    quartile1: q1,\r\n    quartile3: q3,\r\n  } = quartiles( percentages );\r\n\r\n  let threshold1 = q1-1.5*(q3-q1);\r\n  let threshold2 = q1;\r\n  let threshold3 = q3;\r\n  let threshold4 = q3+1.5*(q3-q1);\r\n\r\n  return {\r\n    threshold1,\r\n    threshold2,\r\n    threshold3,\r\n    threshold4,\r\n  };\r\n}\r\n/*\r\nfunction filterNils( posts, nil ) {\r\n  // return posts.length>=GREY_THRESHOLD;\r\n  return _.contains( NILS_TO_USE, Number( nil ) );\r\n}\r\n*/\r\nfunction getLanguage( post ) {\r\n  let lang = post.lang.toLowerCase();\r\n  if( lang!=='it' && lang!=='en' ) {\r\n    return 'other';\r\n  } else {\r\n    return lang;\r\n  }\r\n}\r\nfunction getLanguagesPercentage( posts ) {\r\n  let length = posts.length;\r\n\r\n  return _( posts )\r\n  .countBy( getLanguage )\r\n  .mapValues( count => count/length )\r\n  .value();\r\n}\r\n\r\nfunction getNilAnomalies( posts, lang ) {\r\n\r\n  let languagePercentagePerNil = _( posts )\r\n  // Group by nil\r\n  .groupBy( 'nil' )\r\n  // Use only the provided NILS\r\n  .pick( NILS_TO_USE )\r\n  // Get the percentage of each language\r\n  .mapValues( getLanguagesPercentage )\r\n  .value();\r\n\r\n  // Calculate the quartiles and the thresholds of the selected language\r\n  let selectedLanguagePercentages = _( languagePercentagePerNil )\r\n  // Get the percentages for the selected language\r\n  .map( lang )\r\n  // Sort ascending\r\n  .sortBy()\r\n  .value();\r\n\r\n  let {\r\n    threshold1: t1,\r\n    threshold2: t2,\r\n    threshold3: t3,\r\n    threshold4: t4,\r\n  } = thresholds( selectedLanguagePercentages );\r\n\r\n\r\n  // Map the nil to the correct output\r\n  return _( languagePercentagePerNil )\r\n  .map( function( langs, nil ) {\r\n    let selectedLanguagePercentage = langs[ lang ];\r\n    let type;\r\n\r\n    if( selectedLanguagePercentage<=t1 ) {\r\n      type = 'perc molt bas';\r\n    } else if ( selectedLanguagePercentage>t1 && selectedLanguagePercentage<=t2 ) {\r\n      type = 'perc bas';\r\n    } else if ( selectedLanguagePercentage>t2 && selectedLanguagePercentage<=t3 ) {\r\n      type = 'perc non ano';\r\n    } else if ( selectedLanguagePercentage>t3 && selectedLanguagePercentage<=t4 ) {\r\n      type = 'perc alt';\r\n    } else if ( selectedLanguagePercentage>t4 ) {\r\n      type = 'perc mol alt';\r\n    }\r\n\r\n    return {\r\n      value: selectedLanguagePercentage,\r\n      type,\r\n      nil_id: Number( nil ), // jshint ignore:line\r\n    };\r\n  } )\r\n  .filter( 'type' )\r\n  .value();\r\n}\r\n\r\n\r\n// Module class declaration\r\n\r\n// Module initialization (at first load)\r\n\r\n// Entry point\r\n\r\n// Exports\r\nexport { getNilAnomalies };\r\n\r\n\r\n//  50 6F 77 65 72 65 64  62 79  56 6F 6C 6F 78"],"sourceRoot":"/source/"}