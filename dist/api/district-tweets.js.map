{"version":3,"sources":["api/district-tweets.js"],"names":[],"mappings":"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","file":"api/district-tweets.js","sourcesContent":["'use strict';\n// Load system modules\nimport path from 'path';\n\n// Load modules\nimport moment from 'moment';\nimport _ from 'lodash';\n\n// Load my modules\nimport logger from './';\nimport { getCollection } from '../model/';\n// import nils from '../../config/nils.json';\n\n// Constant declaration\nconst ENDPOINT = path.basename( __filename, '.js' );\nconst DATE_FORMAT = 'YYYY-MM-DD';\n\n// Module variables declaration\nlet log = logger.child( { endpoint: ENDPOINT } );\n\n// Module functions declaration\nfunction now() {\n  return moment().format( DATE_FORMAT );\n}\n\n// Module class declaration\n\n// Module initialization (at first load)\n\n// Entry point\n\n// Exports\nexport default function*() {\n  let qs = this.request.query;\n  let {\n    lang,\n    startDate: start,\n    endDate: end,\n    nil_ID: nil, // jshint ignore: line\n  } = qs;\n  log.trace( { qs }, 'Query string' );\n\n  // Default values\n  lang = lang || 'it';\n  start = start || now();\n  end = end || now();\n\n  lang = lang.toLowerCase();\n  start = moment( start, DATE_FORMAT ).startOf( 'day' ).toDate();\n  end = moment( end, DATE_FORMAT ).endOf( 'day' ).toDate();\n\n  log.trace( 'Lang: %s', lang );\n  log.trace( 'Start: %s', start );\n  log.trace( 'End: %s', end );\n  log.trace( 'Nil: %s', nil );\n\n  let query = {\n    source: 'twitter',\n    date: {\n      $gte: start,\n      $lte: end,\n    },\n  };\n\n  // Narrow by language\n  if( lang==='it' ) {\n    query.lang = 'it';\n  } else if( lang==='en' ) {\n    query.lang = 'en';\n  } else if( lang==='other' ) {\n    query.lang = {\n      $nin: [ 'it', 'en' ],\n    };\n  }\n\n  // Narrow by NIL (if present)\n  if( nil ) {\n    let nilList = nil.split( ',' ).map( nil => Number(nil) );\n\n    query.nil = {\n      $in: nilList,\n    };\n  }\n\n\n  log.debug( { query }, 'Performing the query' );\n  let collection = getCollection();\n  let data = yield collection.find( query, 'date lang id nil' );\n\n  let response = {\n    startDate: moment( start ).format( DATE_FORMAT ),\n    endDate: moment( end ).format( DATE_FORMAT ),\n    lang,\n  };\n\n  response.nils = _( data )\n  .groupBy( 'nil' )\n  .map( ( tweets, nil ) => {\n    let langs = _.countBy( tweets, 'lang' );\n    let value = tweets.length;\n    nil = Number( nil ); // Force conversion\n\n    return {\n      langs,\n      nil,\n      value,\n    };\n  } )\n  .value();\n\n  this.body = response;\n}\n\n\n//  50 6F 77 65 72 65 64  62 79  56 6F 6C 6F 78"],"sourceRoot":"/source/"}